Analyzer.h Explanation
------------------------

Purpose:
- Defines the Analyzer abstract base class.
- Provides a generic interface for all types of packet analyzers (signature-based, anomaly-based).

Classes and Structures:
- Abstract Class: Analyzer
  - Serves as a base class for any analysis logic applied on packets.

Important Methods:
- virtual void analyze(const Packet& packet) = 0;
  - Pure virtual function that must be overridden in any derived analyzer.
  - Analyzes an incoming Packet object for suspicious behavior or attacks.

- virtual std::string getName() const = 0;
  - Pure virtual function to get the name/identity of the analyzer.

Object-Oriented Principles Used:
- **Abstraction**:
  - Analyzer class defines an interface without implementation.
  - Derived classes like SignatureAnalyzer and AnomalyAnalyzer implement the behavior.
- **Polymorphism**:
  - Analyzers can be used via pointers/references to base class (Analyzer*) even if they are of different derived types.
- **Inheritance**:
  - SignatureAnalyzer and AnomalyAnalyzer inherit from Analyzer and override its virtual methods.

Connections to Other Modules:
- SignatureAnalyzer.h and AnomalyAnalyzer.h both inherit from Analyzer.
- IDS.cpp maintains a list of Analyzer pointers to analyze each packet dynamically.
