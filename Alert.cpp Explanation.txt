Alert.cpp Explanation
-----------------------

Purpose:
- Implements the functions declared in Alert.h for the Alert class.

Functions Implemented:
- Alert::Alert(const std::string& type, const std::string& description, std::chrono::system_clock::time_point timestamp)
  - Constructor that initializes an Alert object with a specific type, description, and timestamp.

- Getter Methods:
  - getType(): Returns the type of the alert (e.g., "Signature Match", "Anomaly Detected").
  - getDescription(): Returns the description detailing the detected threat.
  - getTimestamp(): Returns the timestamp representing when the alert was generated.

Object-Oriented Principles Used:
- **Encapsulation**:
  - The data members (type, description, timestamp) are private.
  - Access to these members is only through public getter methods, ensuring controlled read-only access.

Connections to Other Modules:
- SignatureAnalyzer.cpp and AnomalyAnalyzer.cpp instantiate Alert objects when they detect a suspicious packet.
- AlertManager.cpp receives Alert objects and handles their storage, logging, and presentation to the user.
Alert.h Explanation
---------------------

Purpose:
- Defines the Alert class that encapsulates the information about a detected security event.

Classes and Structures:
- Class: Alert
  - Represents a security alert with details like type, description, and timestamp.

Important Data Members:
- std::string type: 
  - The kind of alert (e.g., "Signature Match", "Anomaly Detected").
- std::string description:
  - Detailed information about the reason for the alert (e.g., "Blacklisted IP detected: 203.0.113.77").
- std::chrono::system_clock::time_point timestamp:
  - The exact time the alert was generated.

Important Methods:
- Constructor: 
  - Initializes an Alert object with type, description, and timestamp.
- Getter methods:
  - getType(): Returns the type of the alert.
  - getDescription(): Returns the description.
  - getTimestamp(): Returns the timestamp.

Object-Oriented Principles Used:
- **Encapsulation**:
  - All data members are private.
  - Public getters provide controlled access to alert information.
- **Abstraction**:
  - The details of how an Alert is stored are hidden; users only interact with the public interface.

Connections to Other Modules:
- SignatureAnalyzer and AnomalyAnalyzer create Alert objects when threats are detected.
- AlertManager uses these Alert objects to log, display, and manage the alerts.
AlertManager.cpp Explanation
------------------------------

Purpose:
- Implements the methods declared in AlertManager.h to manage and record security alerts.

Functions Implemented:
- logAlert(const Alert& alert):
  - Locks the alertMutex to ensure thread safety.
  - Adds the alert to the internal vector.
  - Appends the alert details to the alerts.log file on disk.

- showAlerts() const:
  - Locks the alertMutex to read safely.
  - Displays all alerts currently stored in the internal list to the console in a readable format.

- clearAlerts():
  - Locks the alertMutex.
  - Clears the alerts vector, removing all stored alerts.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Internal storage (vector of alerts) and synchronization (mutex) are private.
- **Abstraction**:
  - Exposes simple methods for users to log, show, or clear alerts without worrying about file IO or threading details.
- **Thread Safety**:
  - Implements locking (`std::lock_guard<std::mutex>`) around critical sections to prevent race conditions.

Connections to Other Modules:
- Used by SignatureAnalyzer and AnomalyAnalyzer to record alerts whenever a threat is detected.
- Used by IDS and Main program to display or clear alerts based on user interaction.
AlertManager.h Explanation
----------------------------

Purpose:
- Declares the AlertManager class responsible for managing, displaying, and saving alerts generated by the IDS system.

Classes and Structures:
- Class: AlertManager
  - Handles a collection of Alert objects.
  - Manages concurrency using a mutex to prevent race conditions.

Important Data Members:
- std::vector<Alert> alerts:
  - Stores all Alert objects detected during the session.
- mutable std::mutex alertMutex:
  - Synchronizes access to the alerts vector to prevent concurrent modification issues.

Important Methods:
- void logAlert(const Alert& alert):
  - Adds an Alert object to the internal list and logs it into a file (alerts.log).
- void showAlerts() const:
  - Prints all current alerts to the console in a readable format.
- void clearAlerts():
  - Clears the internal alert list, effectively resetting the alert state.

Object-Oriented Principles Used:
- **Encapsulation**:
  - The alerts list is private.
  - Access is managed only through controlled public methods.
- **Abstraction**:
  - The complexity of saving alerts and handling threading is hidden behind simple method calls (logAlert, showAlerts, clearAlerts).
- **Concurrency and Thread Safety**:
  - Uses `std::mutex` to lock critical sections when accessing shared data (alerts vector).

Connections to Other Modules:
- SignatureAnalyzer.cpp and AnomalyAnalyzer.cpp call logAlert() to record alerts when threats are detected.
- IDS.cpp calls showAlerts() to display all current alerts to the user.
- Main.cpp offers the user menu options to view or clear alerts.
Analyzer.h Explanation
------------------------

Purpose:
- Defines the Analyzer abstract base class.
- Provides a generic interface for all types of packet analyzers (signature-based, anomaly-based).

Classes and Structures:
- Abstract Class: Analyzer
  - Serves as a base class for any analysis logic applied on packets.

Important Methods:
- virtual void analyze(const Packet& packet) = 0;
  - Pure virtual function that must be overridden in any derived analyzer.
  - Analyzes an incoming Packet object for suspicious behavior or attacks.

- virtual std::string getName() const = 0;
  - Pure virtual function to get the name/identity of the analyzer.

Object-Oriented Principles Used:
- **Abstraction**:
  - Analyzer class defines an interface without implementation.
  - Derived classes like SignatureAnalyzer and AnomalyAnalyzer implement the behavior.
- **Polymorphism**:
  - Analyzers can be used via pointers/references to base class (Analyzer*) even if they are of different derived types.
- **Inheritance**:
  - SignatureAnalyzer and AnomalyAnalyzer inherit from Analyzer and override its virtual methods.

Connections to Other Modules:
- SignatureAnalyzer.h and AnomalyAnalyzer.h both inherit from Analyzer.
- IDS.cpp maintains a list of Analyzer pointers to analyze each packet dynamically.
AnomalyAnalyzer.cpp Explanation
----------------------------------

Purpose:
- Implements the methods declared in AnomalyAnalyzer.h to detect anomalies in network traffic behavior.

Functions Implemented:
- AnomalyAnalyzer::AnomalyAnalyzer(AlertManager& alertMgr, FirewallManager& fwMgr):
  - Constructor that initializes references to AlertManager and FirewallManager.

- void AnomalyAnalyzer::analyze(const Packet& packet):
  - Analyzes each packet for three types of anomalies:
    - Packet Flood Detection
    - Port Scanning Detection
    - Large Packet Detection

- void AnomalyAnalyzer::detectFlood(const Packet& packet):
  - Increments packet count from source IP.
  - If the count exceeds floodThreshold, raises an alert and blocks the IP.

- void AnomalyAnalyzer::detectPortScan(const Packet& packet):
  - Records the destination ports accessed by each IP.
  - If an IP accesses more than portScanThreshold different ports, raises an alert and blocks it.

- void AnomalyAnalyzer::detectLargePacket(const Packet& packet):
  - If packet size exceeds largePacketSize, raises an alert and blocks the sender IP.

- std::string AnomalyAnalyzer::getName() const:
  - Returns the name of this analyzer.

Object-Oriented Principles Used:
- **Inheritance**:
  - Inherits from the Analyzer base class.
- **Polymorphism**:
  - Provides its own analyze() logic different from SignatureAnalyzer.
- **Encapsulation**:
  - Internal counting logic and thresholds are hidden inside the class.
- **Abstraction**:
  - Exposes a clean analyze() interface while hiding detection internals.

Connections to Other Modules:
- IDS.cpp uses this analyzer on each packet.
- Detected anomalies generate alerts through AlertManager.
- Malicious IPs are blocked dynamically using FirewallManager.
- GeoIPResolver is used to add geographic information to alerts.
AnomalyAnalyzer.h Explanation
-------------------------------

Purpose:
- Declares the AnomalyAnalyzer class, which detects attacks by identifying abnormal traffic patterns rather than known signatures.

Classes and Structures:
- Class: AnomalyAnalyzer
  - Inherits from Analyzer base class.

Important Data Members:
- AlertManager& alertManager:
  - Reference to AlertManager used to record detected anomalies.
- FirewallManager& firewallManager:
  - Reference to FirewallManager used to block attackers.
- GeoIPResolver geoResolver:
  - Used to resolve the country of suspicious IPs.
- std::map<std::string, int> packetCount:
  - Counts packets received from each source IP.
- std::map<std::string, std::set<int>> portsAccessed:
  - Tracks different ports accessed by each IP.
- int floodThreshold:
  - The number of packets from an IP required to consider it a flood attack (e.g., 10 packets).
- int portScanThreshold:
  - The number of unique ports touched by an IP to consider it a port scanning attempt (e.g., 5 ports).
- int largePacketSize:
  - Packet size limit to consider an abnormally large packet (e.g., 1500 bytes).

Important Methods:
- AnomalyAnalyzer(AlertManager& alertMgr, FirewallManager& fwMgr):
  - Constructor initializing managers and thresholds.
- void analyze(const Packet& packet) override:
  - Performs three checks: flood, port scan, and large packet detection.
- std::string getName() const override:
  - Returns the analyzer name ("Anomaly-Based Analyzer (Smart)").

Object-Oriented Principles Used:
- **Inheritance**:
  - AnomalyAnalyzer inherits from Analyzer class.
- **Polymorphism**:
  - Implements the abstract analyze() function differently from SignatureAnalyzer.
- **Encapsulation**:
  - Hides counters and detection logic within the class.
- **Abstraction**:
  - User of the class only calls analyze(), not worrying about thresholds or internal maps.

Connections to Other Modules:
- IDS.cpp uses this analyzer to analyze all packets.
- Alerts are created and logged through AlertManager.
- Malicious IPs are blocked via FirewallManager.
- GeoIPResolver adds attacker location data into alerts.
FirewallManager.cpp Explanation
---------------------------------

Purpose:
- Implements the methods declared in FirewallManager.h to dynamically block malicious IP addresses using the system's firewall.

Functions Implemented:
- blockIP(const std::string& ip):
  - Checks if the IP is already blocked.
  - Constructs a system command using Windows `netsh advfirewall firewall add rule` to block the IP both inbound and outbound.
  - Executes the command using std::system().
  - Records the blocked IP into the internal set.

- isBlocked(const std::string& ip) const:
  - Looks up the IP address in the internal blockedIPs set to determine if it has already been blocked.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Only FirewallManager class manages the list of blocked IPs and interacts with the firewall.
- **Abstraction**:
  - Users interact through simple functions; they do not need to understand or manually configure the Windows Firewall.

Connections to Other Modules:
- SignatureAnalyzer.cpp and AnomalyAnalyzer.cpp call blockIP() when suspicious activity is detected.
- IDS.cpp indirectly benefits because the FirewallManager ensures malicious IPs are blocked automatically after alert generation.
FirewallManager.h Explanation
-------------------------------

Purpose:
- Declares the FirewallManager class responsible for automatically blocking malicious IP addresses through the Windows Firewall.

Classes and Structures:
- Class: FirewallManager
  - Manages firewall rules to block traffic from detected attackers.

Important Data Members:
- std::set<std::string> blockedIPs:
  - Stores IP addresses that have already been blocked to avoid duplicate rules.

Important Methods:
- void blockIP(const std::string& ip):
  - Adds a Windows Firewall rule to block the given IP address in both inbound and outbound directions.
- bool isBlocked(const std::string& ip) const:
  - Checks if a given IP address is already in the blocked list.

Object-Oriented Principles Used:
- **Encapsulation**:
  - The list of blocked IPs is private and only modified through public methods.
- **Abstraction**:
  - Users simply call `blockIP(ip)` without worrying about the exact Windows firewall commands.

Connections to Other Modules:
- Called by SignatureAnalyzer and AnomalyAnalyzer after detecting a suspicious packet.
- Ensures that once an attack is detected, the attacker's traffic is blocked in real time.
GeoIPResolver.cpp Explanation
-------------------------------

Purpose:
- Implements the GeoIPResolver class methods declared in GeoIPResolver.h to map IP prefixes to country names.

Functions Implemented:
- GeoIPResolver::GeoIPResolver():
  - Constructor that calls loadStaticData() to initialize the IP-to-country mappings when an object is created.

- void GeoIPResolver::loadStaticData():
  - Populates the internal unordered_map with a few static IP prefixes mapped to country names (e.g., "203.0" => "China").

- std::string GeoIPResolver::getCountry(const std::string& ip) const:
  - Extracts the first two octets of the provided IP address (e.g., "203.0") and looks up the corresponding country in the ipToCountry map.
  - Returns "Unknown" if no match is found.

Object-Oriented Principles Used:
- **Encapsulation**:
  - The ipToCountry mapping is kept private.
  - Users interact only via the public getCountry() method.
- **Abstraction**:
  - Hides the complexity of IP parsing and matching from the user, providing a simple getCountry() interface.

Connections to Other Modules:
- SignatureAnalyzer.cpp and AnomalyAnalyzer.cpp both use GeoIPResolver to enhance alert messages with attacker location data.
- Alerts are more informative for users and for documentation/reporting purposes.
GeoIPResolver.h Explanation
-----------------------------

Purpose:
- Declares the GeoIPResolver class responsible for mapping IP prefixes to country names for geographic threat intelligence.

Classes and Structures:
- Class: GeoIPResolver
  - Provides a lightweight mechanism to resolve attacker IP addresses into country names.

Important Data Members:
- std::unordered_map<std::string, std::string> ipToCountry:
  - Stores mappings of IP address prefixes (like "192.168", "203.0") to country names.

Important Methods:
- GeoIPResolver():
  - Constructor that automatically loads the static IP-to-country mapping.

- std::string getCountry(const std::string& ip) const:
  - Given an IP address, returns the corresponding country name if found, or "Unknown" otherwise.

Private Methods:
- void loadStaticData():
  - Fills the ipToCountry map with some hardcoded values for fast lookup.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Internal map (ipToCountry) is private.
  - Only public access is through getCountry().

Connections to Other Modules:
- Used by SignatureAnalyzer and AnomalyAnalyzer to append country information to generated alerts.
- Helps create more informative and professional logs and reports.
IDS.cpp Explanation
---------------------

Purpose:
- Implements the methods declared in IDS.h to manage real-time packet capture, offline PCAP analysis, and dispatching packets to analyzers.

Functions Implemented:
- void IDS::parsePcapPacket(const struct pcap_pkthdr* header, const u_char* data):
  - Extracts source IP, destination IP, source port, destination port, and protocol from raw packet bytes.
  - Creates a Packet object with extracted information and passes it to analyzers.

- IDS::IDS():
  - Constructor. Initializes and registers the analyzers (SignatureAnalyzer and AnomalyAnalyzer).

- void IDS::addAnalyzer(std::unique_ptr<Analyzer> analyzer):
  - Adds a dynamically allocated analyzer to the analyzers list.

- void IDS::analyzePacket(const Packet& packet):
  - Passes the Packet object to each registered analyzer for inspection.

- void IDS::loadPcapFile(const std::string& filename):
  - Opens a PCAP file using libpcap.
  - Iterates through each packet, parsing and analyzing it.

- void IDS::startLiveCapture(const std::string& interfaceName):
  - Starts capturing packets live from the selected network interface.
  - Each captured packet is parsed and analyzed on-the-fly.

- void IDS::showAlerts() const:
  - Calls AlertManager to print all recorded alerts.

- void IDS::clearAlerts():
  - Calls AlertManager to remove all recorded alerts.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Internal management of analyzers, alerts, and parsing is private to the IDS class.
- **Abstraction**:
  - Provides high-level user operations like "Start Capture" without exposing packet parsing details.
- **Polymorphism**:
  - Analyzers are stored as base-class pointers (Analyzer*) but behave differently depending on their type (Signature or Anomaly).

Connections to Other Modules:
- Coordinates work between:
  - Packet objects (parsed from raw network data),
  - SignatureAnalyzer and AnomalyAnalyzer (for detection),
  - AlertManager (for logging alerts),
  - FirewallManager (for blocking detected attackers).
IDS.h Explanation
-------------------

Purpose:
- Declares the IDS (Intrusion Detection System) class, which manages the overall packet capturing, analysis, and alerting workflow.

Classes and Structures:
- Class: IDS
  - Central class that ties together packet parsing, analyzers, and alert management.

Important Data Members:
- std::vector<std::unique_ptr<Analyzer>> analyzers:
  - Stores all analyzers (SignatureAnalyzer, AnomalyAnalyzer) dynamically.
- AlertManager alertManager:
  - Manages saving, displaying, and clearing alerts.
- FirewallManager firewall:
  - Manages blocking detected attacker IPs.

Important Methods:
- IDS():
  - Constructor. Initializes and registers analyzers.
- void addAnalyzer(std::unique_ptr<Analyzer> analyzer):
  - Adds a new analyzer to the internal analyzers list.
- void analyzePacket(const Packet& packet):
  - Passes a packet to all registered analyzers for inspection.
- void loadPcapFile(const std::string& filename):
  - Loads packets from a saved PCAP file for offline analysis.
- void startLiveCapture(const std::string& interfaceName):
  - Captures real-time packets from the selected network interface.
- void showAlerts() const:
  - Displays all recorded alerts.
- void clearAlerts():
  - Clears all saved alerts.

Private Methods:
- void parsePcapPacket(const struct pcap_pkthdr* header, const u_char* data):
  - Parses low-level packet data into a Packet object.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Internal workings (alertManager, analyzers list) are private.
- **Abstraction**:
  - High-level methods (startLiveCapture, loadPcapFile) hide all packet parsing complexity.
- **Polymorphism**:
  - Analyzers are managed via Analyzer* pointers, enabling dynamic analyzer behavior.

Connections to Other Modules:
- Central controller that uses:
  - Packet class (for individual packet representation),
  - Analyzers (SignatureAnalyzer, AnomalyAnalyzer),
  - AlertManager (for alerts),
  - FirewallManager (for blocking attackers).
Main.cpp Explanation
----------------------

Purpose:
- Implements the user interface (text-based menu) that allows the user to interact with the IDS system.

Functions and Logic:
- Displays a menu with options:
  1. List Network Interfaces
  2. Start Live Capture
  3. Analyze PCAP File
  4. View Alerts
  5. Clear Alerts
  6. Exit

- User selects an option, and the corresponding IDS function is called.

Important Parts:
- Lists available network devices using pcap_findalldevs().
- Allows the user to select a device for live capture.
- Prompts user for PCAP file name if analyzing offline.
- Calls IDS.showAlerts() to display recorded alerts.
- Calls IDS.clearAlerts() to reset alerts list.

Object-Oriented Principles Used:
- **Encapsulation**:
  - The Main function interacts with IDS only through its public methods (startLiveCapture, loadPcapFile, etc.).
- **Abstraction**:
  - The user interface (main.cpp) hides all the low-level details like packet parsing, analyzer behavior, or firewall commands.

Connections to Other Modules:
- Creates an IDS object that internally:
  - Uses Packet, AlertManager, FirewallManager.
  - Uses analyzers (SignatureAnalyzer, AnomalyAnalyzer) to detect and block attacks.
- Receives user input and triggers appropriate IDS operations.
Packet.cpp Explanation
------------------------

Purpose:
- Implements the methods defined in Packet.h for the Packet class.

Functions Implemented:
- Packet::Packet()
  - Constructor that initializes all fields of a Packet object with the captured data.

- Getter Methods:
  - getSourceIP(): Returns the source IP address.
  - getDestinationIP(): Returns the destination IP address.
  - getSourcePort(): Returns the source port number.
  - getDestinationPort(): Returns the destination port number.
  - getProtocol(): Returns the protocol used (TCP, UDP, OTHER).
  - getTimestamp(): Returns the time the packet was captured.
  - getLength(): Returns the packet length in bytes.

Object-Oriented Principles Used:
- **Encapsulation**:
  - Data members are private.
  - Controlled access is provided through public getters.
- **Abstraction**:
  - Users interact with a clean interface (getter functions) without worrying about internal implementation.

Connections to Other Modules:
- IDS.cpp calls the Packet constructor to create a Packet object when parsing live/pcap packet data.
- Analyzers (SignatureAnalyzer and AnomalyAnalyzer) use the getters to inspect packet properties for threat detection.
Packet.h Explanation
----------------------

Purpose:
- Defines the Packet class, which models a captured network packet with important metadata.

Classes and Structures:
- Class: Packet
  - Represents a network packet, including source and destination information.

Important Data Members:
- std::string sourceIP: Stores the IP address of the packet sender.
- std::string destinationIP: Stores the IP address of the packet receiver.
- int sourcePort: Source TCP/UDP port.
- int destinationPort: Destination TCP/UDP port.
- std::string protocol: Protocol used (TCP, UDP, OTHER).
- std::chrono::system_clock::time_point timestamp: Time the packet was captured.
- int length: Size of the captured packet in bytes.

Important Methods:
- Constructor: Initializes all data members when a new Packet is created.
- Getter methods: Provide access to private data (getSourceIP(), getDestinationIP(), etc.).

Object-Oriented Principles Used:
- **Encapsulation**: 
  - All data members are private.
  - Only accessible through public getter methods, protecting data integrity.
- **Abstraction**:
  - Users of Packet class only need to know about getters, not internal storage details.

Connections to Other Modules:
- IDS.cpp creates Packet objects after parsing network data.
- Packet objects are passed to analyzers (SignatureAnalyzer, AnomalyAnalyzer) for threat detection.
SignatureAnalyzer.cpp Explanation
-----------------------------------

Purpose:
- Implements the methods declared in SignatureAnalyzer.h to detect attacks based on known bad IPs and ports.

Functions Implemented:
- SignatureAnalyzer::SignatureAnalyzer(AlertManager& alertMgr, FirewallManager& fwMgr):
  - Constructor that initializes internal managers and loads static signatures.

- void SignatureAnalyzer::loadSignatures():
  - Loads hardcoded lists of blacklisted IPs and suspicious ports into internal sets.

- void SignatureAnalyzer::analyze(const Packet& packet):
  - Checks if the source IP is blacklisted.
  - Checks if the destination port is considered suspicious.
  - If a match is found:
    - Logs an Alert via AlertManager.
    - Optionally blocks the attacker IP via FirewallManager.
    - Enhances the alert with country name using GeoIPResolver.

- std::string SignatureAnalyzer::getName() const:
  - Returns the name of the analyzer ("Signature-Based Analyzer").

Object-Oriented Principles Used:
- **Inheritance**:
  - Extends the Analyzer abstract class.
- **Polymorphism**:
  - Implements the virtual analyze() method differently compared to AnomalyAnalyzer.
- **Encapsulation**:
  - Keeps blacklist sets and detection logic private.
- **Abstraction**:
  - Users of this class don’t see how detection happens internally.

Connections to Other Modules:
- Used by IDS.cpp to analyze every incoming packet.
- Works closely with AlertManager (for alerts) and FirewallManager (for blocking attackers).
- GeoIPResolver adds location awareness to detection.
SignatureAnalyzer.h Explanation
---------------------------------

Purpose:
- Declares the SignatureAnalyzer class, which detects known attacks based on blacklisted IP addresses and suspicious ports.

Classes and Structures:
- Class: SignatureAnalyzer
  - Inherits from Analyzer base class.

Important Data Members:
- AlertManager& alertManager:
  - Reference to AlertManager used to log alerts.
- FirewallManager& firewallManager:
  - Reference to FirewallManager used to block malicious IPs.
- GeoIPResolver geoResolver:
  - Used to determine the country of the detected IP.
- std::unordered_set<std::string> blacklistedIPs:
  - Contains a list of known malicious IP addresses.
- std::unordered_set<int> suspiciousPorts:
  - Contains a list of ports associated with risky services (e.g., Telnet, RDP).

Important Methods:
- SignatureAnalyzer(AlertManager& alertMgr, FirewallManager& fwMgr):
  - Constructor initializing references and loading signatures.
- void analyze(const Packet& packet) override:
  - Checks packet source IP and destination port against blacklists.
- std::string getName() const override:
  - Returns the name "Signature-Based Analyzer".

Object-Oriented Principles Used:
- **Inheritance**:
  - SignatureAnalyzer inherits from Analyzer and implements its virtual methods.
- **Polymorphism**:
  - Overrides virtual methods (analyze and getName) for specific detection behavior.
- **Encapsulation**:
  - Internal details like blacklists and firewall calls are hidden behind simple public methods.

Connections to Other Modules:
- Receives Packet objects from IDS.cpp.
- If a packet matches a signature, it generates an Alert and calls FirewallManager to block the IP.
- Enhances alerts with country information using GeoIPResolver.
